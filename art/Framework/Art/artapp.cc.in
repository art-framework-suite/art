#include "art/Framework/Art/@ART_MAIN_FUNC@.h"
// vim: set sw=2 expandtab :

#include "art/Framework/Art/BasicOutputOptionsHandler.h"
#include "art/Framework/Art/BasicSourceOptionsHandler.h"
#include "art/Framework/Art/DebugOptionsHandler.h"
#include "art/Framework/Art/ProcessingOptionsHandler.h"
#include "art/Framework/Art/FileCatalogOptionsHandler.h"
#include "art/Framework/Art/OptionsHandlers.h"
#include "art/Framework/Art/run_art.h"
#include "cetlib/filepath_maker.h"

#include "boost/filesystem.hpp"
#include "boost/program_options.hpp"

#include <iostream>
#include <memory>
#include <string>

namespace bpo = boost::program_options;

using namespace std;

#cmakedefine01 ART_RETHROW_DEFAULT

int
@ART_MAIN_FUNC@(int argc, char* argv[])
{
  // Configuration file lookup policy.
  char const* fhicl_env = getenv("FHICL_FILE_PATH");
  string search_path;
  if (fhicl_env == nullptr) {
    cerr << "Expected environment variable FHICL_FILE_PATH is missing or empty: using \".\"\n";
    search_path = ".";
  }
  else {
    search_path = string{fhicl_env};
  }
  cet::filepath_first_absolute_or_lookup_with_dot lookupPolicy{search_path};
  // Empty options_description.
  bpo::options_description all_desc;
  // Create and store options handlers.
  art::OptionsHandlers handlers;
  handlers.reserve(5);
  // Add new handlers here. Do *not* add a BasicOptionsHandler: it will be done for you.
  handlers.emplace_back(new art::BasicSourceOptionsHandler{all_desc});
  handlers.emplace_back(new art::BasicOutputOptionsHandler{all_desc});
  handlers.emplace_back(new art::ProcessingOptionsHandler{all_desc, ART_RETHROW_DEFAULT});
  handlers.emplace_back(new art::DebugOptionsHandler{all_desc});
  handlers.emplace_back(new art::FileCatalogOptionsHandler{all_desc});
  auto ret = art::run_art(argc, argv, all_desc, lookupPolicy, move(handlers));
  return ret;
}

int
@ART_MAIN_FUNC@_string_config(string const& config_string)
{
  return art::run_art_string_config(config_string);
}

// Local Variables:
// mode: c++
// End:
