#ifndef art_Framework_Core_@ART_IPR_CLASS_NAME@_h
#define art_Framework_Core_@ART_IPR_CLASS_NAME@_h
////////////////////////////////////////////////////////////////////////
// @ART_IPR_CLASS_NAME@
//
// A smart query object used as the main way of accessing associated
// objects in a one-to-one association.
//
// Given an Assns associating A with B (or B with A) (possibly with an
// associated data object D) and a source ACOLL of A objects to be
// found in the Assns, allow indexed access to the B and/or D objects
// associated with the A objects in ACOLL.
//
////////////////////////////////////
// Interface.
//////////
//
// For ease of understanding, the interface is presented here; reading
// the rest of the header is not for the faint of heart.
//
// Notes:
//
// * ProdB and Data (if needed) are the only template arguments that
// must be specified when constructing a @ART_IPR_CLASS_NAME@. Any other
// items are deducible from arguments.
//
// * An attempt to create a @ART_IPR_CLASS_NAME@ where one of the listed
// A objects actually has multiple B objects associated with it will
// result in an exception: use FindMany{,P} instead.
//
// * The @ART_IPR_CLASS_NAME@ needs a source of objects of type A, an
// event and an input tag corresponding to the underlying association
// collection from which to create itself.
//
// * When constructed, the @ART_IPR_CLASS_NAME@ will obtain and
// interrogate the correct Assns and provide access to the B (and/or D)
// object(s) associated with each supplied A object in the order in
// which the A objects were specified.
//
// * If the specified A does not have an associated B or D then the
// cet::maybe_ref will be invalid.
//
// * If the required association collection has an extra data object D
// with each association then it *must* be specified as a template
// argument, even if it is not relevant to the current query.
//
// * *All* indexed accessors (at(), data(), get()) are bounds-checked.
//
// Useful typedefs.
//
// typedef ProdB assoc_t;
// typedef Data data_t;
// typedef typename std::vector<assoc_t const *>::size_type size_type; // FindOne
// typedef typename std::vector<art::Ptr<assoc_t> >::size_type size_type; // FindOneP
//
// Constructors.
//
// // From Handle or ValidHandle to collection of A.
// @ART_IPR_CLASS_NAME@<ProdB>(HANDLE<ProdAColl> const &,
//                Event const &,
//                InputTag const &);
// @ART_IPR_CLASS_NAME@<ProdB, Data>(HANDLE<ProdAColl> const &,
//                      Event const &,
//                      InputTag const &);
//
// // From sequence of pointer to A (including View<A>).
// @ART_IPR_CLASS_NAME@<ProdB>(View<ProdA> const &,
//                Event const &,
//                InputTag const &);
// @ART_IPR_CLASS_NAME@<ProdB, Data>(View<ProdA> const &,
//                      Event const &,
//                      InputTag const &);
//
// // From arbitrary sequence of Ptr<A>.
// @ART_IPR_CLASS_NAME@<ProdB>(PtrProdAColl const &,
//                Event const &,
//                InputTag const &);
// @ART_IPR_CLASS_NAME@<ProdB, Data>(PtrProdAColl const &,
//                      Event const &,
//                      InputTag const &);
//
// // From an initializer list of Ptr<A>.
// @ART_IPR_CLASS_NAME@<ProdB>(<brace-enclosed initializer list>,
//                Event const &,
//                InputTag const &);
// @ART_IPR_CLASS_NAME@<ProdB, Data>(<brace-enclosed initializer list>,
//                      Event const &,
//                      InputTag const &);
//
// Modifiers.
//
// <NONE>.
//
// Accessors.
//
// size_type size() const;
// cet::maybe_ref<assoc_t const> at(size_type) const; // FindOne
// art::Ptr<assoc_t> const & at(size_type) const; // FindOneP
// cet::maybe_ref<data_t const> data(size_type) const;
// void get(size_type,
//          cet::maybe_ref<assoc_t const> &) const; // FindOne
// void get(size_type,
//          art::Ptr<assoc_t> &) const; // FindOneP
// void get(size_type,
//          cet::maybe_ref<assoc_t const> &,
//          cet::maybe_ref<data_t const> &)
//   const; // *Must* be used for FindOne<ProdB, Data>.
// void get(size_type,
//          art::Ptr<assoc_t> &,
//          cet::maybe_ref<data_t const> &)
//   const; // *Must* be used for FindOneP<ProdB, Data>.
//
// Comparison operations.
//
// bool operator == (@ART_IPR_CLASS_NAME@ const & other) const;
//
////////////////////////////////////////////////////////////////////////
#include "art/Framework/Core/detail/IPRHelper.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Persistency/Common/Assns.h"
#include "art/Persistency/Common/Ptr.h"
#include "art/Utilities/InputTag.h"
#include "cetlib/maybe_ref.h"

#include <initializer_list>
#include <vector>

#cmakedefine ART_IPR_BY_PTR

namespace art {
  // General template
  template <typename ProdB, typename DATA = void>
  class @ART_IPR_CLASS_NAME@;

  // Specialization.
  template <typename ProdB>
  class @ART_IPR_CLASS_NAME@<ProdB, void>;
}

////////////////////////////////////////////////////////////////////////
// Implementation of the specialization.
template <typename ProdB>
class art::@ART_IPR_CLASS_NAME@<ProdB, void> {
public:

  typedef ProdB assoc_t;

#ifdef ART_IPR_BY_PTR
  typedef std::vector<Ptr<assoc_t> > bColl_t;
#else
  typedef std::vector<ProdB const *> bColl_t;
#endif
  typedef typename bColl_t::value_type value_type;
  typedef typename bColl_t::size_type size_type;
  typedef typename bColl_t::difference_type difference_type;
  typedef typename bColl_t::const_reference const_reference;
  typedef typename bColl_t::reference reference;

  template <typename HANDLE>
    @ART_IPR_CLASS_NAME@(HANDLE const & aCollection,
                         Event const & e,
                         InputTag const & tag,
                         typename std::enable_if<detail::is_handle<HANDLE>::value>::type * = 0);

  template <typename ProdAColl>
    @ART_IPR_CLASS_NAME@(ProdAColl const & view,
                         Event const & e,
                         InputTag const & tag,
                         typename std::enable_if<std::is_pointer<typename ProdAColl::value_type>::value, void>::type * = 0);

  template <typename PtrProdAColl>
    @ART_IPR_CLASS_NAME@(PtrProdAColl const & aPtrColl,
                         Event const & e,
                         InputTag const & tag,
                         typename std::enable_if<std::is_same<typename PtrProdAColl::value_type,
                         art::Ptr<typename PtrProdAColl::value_type::value_type> >::value>::type * = 0);

  template <typename ProdA>
    @ART_IPR_CLASS_NAME@(std::initializer_list<Ptr<ProdA> > const & ptrs,
                         Event const & e,
                         InputTag const & tag);

  // Is this a valid query (did we find an Assns)?
  bool isValid() const;

  // Number of query results
  size_type size() const;

  // Associated item by index (bounds-checked).
#ifdef ART_IPR_BY_PTR
  Ptr<assoc_t> const & at(size_type i) const;
  void get(size_type i, Ptr<assoc_t> & item) const;
#else
  cet::maybe_ref<assoc_t const> at(size_type i) const;
  void get(size_type i, cet::maybe_ref<assoc_t const> & item) const;
#endif
  bool operator == (@ART_IPR_CLASS_NAME@<ProdB, void> const & other) const;

protected:
  @ART_IPR_CLASS_NAME@() : bCollection_() { }
  bColl_t & bCollection() { return bCollection_; }

  void setStoredException(std::shared_ptr<cet::exception const> && e);
  void throwIfInvalid() const;

private:
  bColl_t bCollection_;
  std::shared_ptr<cet::exception const> storedException_;
};

template <typename ProdB, typename Data>
class art::@ART_IPR_CLASS_NAME@ : private art::@ART_IPR_CLASS_NAME@<ProdB, void> {
private:
  typedef @ART_IPR_CLASS_NAME@<ProdB, void> base;
public:
  typedef std::vector<Data const *> dataColl_t;
  typedef typename base::value_type value_type;
  typedef typename base::size_type size_type;
  typedef typename base::difference_type difference_type;
  typedef typename base::const_reference const_reference;
  typedef typename base::reference reference;
  typedef typename base::assoc_t assoc_t;

  typedef Data const * data_const_pointer;
  typedef Data const & data_const_reference;
  typedef Data & data_reference;

  typedef Data data_t;

  template <typename HANDLE>
    @ART_IPR_CLASS_NAME@(HANDLE const & aCollection,
                         Event const & e,
                         InputTag const & tag,
                         typename std::enable_if<detail::is_handle<HANDLE>::value>::type * = 0);

  template <typename ProdAColl>
    @ART_IPR_CLASS_NAME@(ProdAColl const & view,
                         Event const & e,
                         InputTag const & tag,
                         typename std::enable_if<std::is_pointer<typename ProdAColl::value_type>::value, void>::type * = 0);


  template <typename PtrProdAColl>
    @ART_IPR_CLASS_NAME@(PtrProdAColl const & aPtrColl,
                         Event const & e,
                         InputTag const & tag,
                         typename std::enable_if<std::is_same<typename PtrProdAColl::value_type,
                         art::Ptr<typename PtrProdAColl::value_type::value_type> >::value>::type * = 0);

  template <typename ProdA>
    @ART_IPR_CLASS_NAME@(std::initializer_list<Ptr<ProdA> > const & ptrs,
                         Event const & e,
                         InputTag const & tag);

  using base::size;
  using base::isValid;
  using base::at;
  using base::get;

  // Association extra-data object by index (bounds-checked).
  cet::maybe_ref<Data const> data(size_type i) const;

  // Associated item and extra-data object by index (bounds-checked).
  void get(size_type i,
#ifdef ART_IPR_BY_PTR
           art::Ptr<assoc_t> & item,
#else
           cet::maybe_ref<assoc_t const> & item,
#endif
           cet::maybe_ref<Data const> & data) const;

  bool operator == (@ART_IPR_CLASS_NAME@<ProdB, Data> const & other) const;

private:
  dataColl_t dataCollection_;
};

////////////////////////////////////////////////////////////////////////
// Base class implementation.
template <typename ProdB>
template <typename HANDLE>
art::@ART_IPR_CLASS_NAME@<ProdB, void>::
@ART_IPR_CLASS_NAME@(HANDLE const & aCollection,
                     Event const & e,
                     InputTag const & tag,
                     typename std::enable_if<detail::is_handle<HANDLE>::value>::type *)
  :
  bCollection_(),
  storedException_()
{
  typedef typename HANDLE::element_type::value_type ProdA;
  detail::IPRHelper<ProdA, ProdB, void, void> finder(e, tag);
  storedException_ =
    finder(*aCollection, bCollection_);
}

template <typename ProdB>
template <typename ProdAColl>
art::@ART_IPR_CLASS_NAME@<ProdB, void>::
@ART_IPR_CLASS_NAME@(ProdAColl const & view,
                     Event const & e,
                     InputTag const & tag,
                     typename std::enable_if<std::is_pointer<typename ProdAColl::value_type>::value, void>::type *)
  :
  bCollection_(),
  storedException_()
{
  typedef typename std::remove_const<typename std::remove_pointer<typename ProdAColl::value_type>::type>::type ProdA;
  detail::IPRHelper<ProdA, ProdB, void, void> finder(e, tag);
  storedException_ =
    finder(view, bCollection_);
}

template <typename ProdB>
template <typename PtrProdAColl>
art::@ART_IPR_CLASS_NAME@<ProdB, void>::
@ART_IPR_CLASS_NAME@(PtrProdAColl const & aPtrColl,
                     Event const & e,
                     InputTag const & tag,
                     typename std::enable_if<std::is_same<typename PtrProdAColl::value_type,
                     art::Ptr<typename PtrProdAColl::value_type::value_type> >::value>::type *)
  :
  bCollection_(),
  storedException_()
{
  typedef typename PtrProdAColl::value_type::value_type ProdA;
  detail::IPRHelper<ProdA, ProdB, void, void> finder(e, tag);
  storedException_ =
    finder(aPtrColl, bCollection_);
}

template <typename ProdB>
template <typename ProdA>
art::@ART_IPR_CLASS_NAME@<ProdB, void>::
@ART_IPR_CLASS_NAME@(std::initializer_list<Ptr<ProdA> > const & ptrs,
                     Event const & e,
                     InputTag const & tag)
  :
  bCollection_(),
  storedException_()
{
  detail::IPRHelper<ProdA, ProdB, void, void> finder(e, tag);
  storedException_ =
    finder(ptrs, bCollection_);
}

template <typename ProdB>
inline
auto
art::@ART_IPR_CLASS_NAME@<ProdB, void>::
size() const
-> size_type
{
  throwIfInvalid();
  return bCollection_.size();
}

template <typename ProdB>
inline
bool
art::@ART_IPR_CLASS_NAME@<ProdB, void>::
isValid() const
{
  return (storedException_.get() == nullptr);
}

template <typename ProdB>
inline
auto
art::@ART_IPR_CLASS_NAME@<ProdB, void>::
at(size_type i) const
->
#ifdef ART_IPR_BY_PTR
art::Ptr<assoc_t> const &
#else
cet::maybe_ref<assoc_t const>
#endif
{
  throwIfInvalid();
#ifdef ART_IPR_BY_PTR
  return bCollection_.at(i);
#else
  return cet::maybe_ref<assoc_t const>(*bCollection_.at(i));
#endif
}

template <typename ProdB>
inline
void
art::@ART_IPR_CLASS_NAME@<ProdB, void>::
get(size_type i,
#ifdef ART_IPR_BY_PTR
    Ptr<assoc_t> & item
#else
    cet::maybe_ref<assoc_t const> & item
#endif
   ) const
{
  throwIfInvalid();
#ifdef ART_IPR_BY_PTR
  item = bCollection_.at(i);
#else
  item.reseat(*bCollection_.at(i));
#endif
}

template <typename ProdB>
inline
bool
art::@ART_IPR_CLASS_NAME@<ProdB, void>::
operator == (@ART_IPR_CLASS_NAME@<ProdB, void> const & other) const
{
  throwIfInvalid();
  return bCollection_ == other.bCollection_;
}

template <typename ProdB>
inline
void
art::@ART_IPR_CLASS_NAME@<ProdB, void>::
setStoredException(std::shared_ptr<cet::exception const> && e)
{
  storedException_ = std::move(e);
}

template <typename ProdB>
inline
void
art::@ART_IPR_CLASS_NAME@<ProdB, void>::
throwIfInvalid() const
{
  if (!isValid()) {
    throw Exception(errors::LogicError, "Invalid @ART_IPR_CLASS_NAME@", *storedException_)
      << "Attempt to use a @ART_IPR_CLASS_NAME@ where the underlying art::Assns product was not found.";
  }
}

////////////////////////////////////////////////////////////////////////
// Derived class implementation.
template <typename ProdB, typename Data>
template <typename HANDLE>
art::@ART_IPR_CLASS_NAME@<ProdB, Data>::
@ART_IPR_CLASS_NAME@(HANDLE const & aCollection,
                     Event const & e,
                     InputTag const & tag,
                     typename std::enable_if<detail::is_handle<HANDLE>::value>::type *)
    :
    base(),
    dataCollection_()
{
  typedef typename HANDLE::element_type::value_type ProdA;
  detail::IPRHelper<ProdA, ProdB, Data, dataColl_t> finder(e, tag);
  base::setStoredException(finder(*aCollection, base::bCollection(), dataCollection_));
}

template <typename ProdB, typename Data>
template <typename ProdAColl>
art::@ART_IPR_CLASS_NAME@<ProdB, Data>::
@ART_IPR_CLASS_NAME@(ProdAColl const & view,
                     Event const & e,
                     InputTag const & tag,
                         typename std::enable_if<std::is_pointer<typename ProdAColl::value_type>::value, void>::type *)
    :
    base(),
    dataCollection_()
{
  typedef typename std::remove_const<typename std::remove_pointer<typename ProdAColl::value_type>::type>::type ProdA;
  detail::IPRHelper<ProdA, ProdB, Data, dataColl_t> finder(e, tag);
  base::setStoredException(finder(view, base::bCollection(), dataCollection_));
}

template <typename ProdB, typename Data>
template <typename PtrProdAColl>
art::@ART_IPR_CLASS_NAME@<ProdB, Data>::
@ART_IPR_CLASS_NAME@(PtrProdAColl const & aPtrColl,
                     Event const & e,
                     InputTag const & tag,
                     typename std::enable_if<std::is_same<typename PtrProdAColl::value_type,
                     art::Ptr<typename PtrProdAColl::value_type::value_type> >::value>::type *)
    :
    base(),
    dataCollection_()
{
  typedef typename PtrProdAColl::value_type::value_type ProdA;
  detail::IPRHelper<ProdA, ProdB, Data, dataColl_t> finder(e, tag);
  base::setStoredException(finder(aPtrColl, base::bCollection(), dataCollection_));
}

template <typename ProdB, typename Data>
template <typename ProdA>
art::@ART_IPR_CLASS_NAME@<ProdB, Data>::
@ART_IPR_CLASS_NAME@(std::initializer_list<Ptr<ProdA> > const & ptrs,
                     Event const & e,
                     InputTag const & tag)
    :
    base(),
    dataCollection_()
{
  detail::IPRHelper<ProdA, ProdB, Data, dataColl_t> finder(e, tag);
  base::setStoredException(finder(ptrs, base::bCollection(), dataCollection_));
}

template <typename ProdB, typename Data>
inline
cet::maybe_ref<Data const>
art::@ART_IPR_CLASS_NAME@<ProdB, Data>::
data(size_type i) const
{
  base::throwIfInvalid();
  return cet::maybe_ref<Data const>(*dataCollection_.at(i));
}

template <typename ProdB, typename Data>
inline
void
art::@ART_IPR_CLASS_NAME@<ProdB, Data>::
get(size_type i,
#ifdef ART_IPR_BY_PTR
    Ptr<assoc_t> & item,
#else
    cet::maybe_ref<assoc_t const> & item,
#endif
    cet::maybe_ref<Data const> & data) const
{
  base::get(i, item); // Will check validity.
  data.reseat(*dataCollection_.at(i));
}

template <typename ProdB, typename Data>
inline
bool
art::@ART_IPR_CLASS_NAME@<ProdB, Data>::
operator == (@ART_IPR_CLASS_NAME@<ProdB, Data> const & other) const
{
  return this->base::operator==(other) && // Will check validity.
         dataCollection_ == other.dataCollection_;
}

#undef ART_IPR_BY_PTR

#endif /* art_Framework_Core_@ART_IPR_CLASS_NAME@_h */

// Local Variables:
// mode: c++
// End:
