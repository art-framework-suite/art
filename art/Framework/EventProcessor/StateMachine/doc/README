==============
General design
==============

The state-machine has been implemented with boost::statechart as a
series of composite states.  Loosely speaking, the hierarchy is:

Machine
   \
   HandleFiles
      \
      HandleRuns
         \
         HandleSubRuns
            \
            HandleEvents

List of nested states for a given composite state:

Machine      : Starting, Stopping, Error, HandleFiles
HandleFiles  : NewInputFile             , HandleRuns
HandleRuns   : NewRun      , PauseRun   , HandleSubRuns
HandleSubRuns: NewSubRun   , PauseSubRun, HandleEvents
HandleEvents : NewEvent    , PauseEvent

For the full diagram, please see the 'sm.txt' file, which can be
parsed by plantuml to produce a suitable diagram.  The
'sm_handleFiles.txt' can be viewed separately if only the HandleFiles
state is of interest.

!!! N.B. HandleFiles is a history pseudostate.  This will be important later.

Upon receiving an Event, Run, SubRun, or InputFile state-machine
event, the machine transitions outside of the relevant composite state
('HandleEvents' for an Event event, 'HandleFiles' for an InputFile
event, etc.) and reenters the same composite state, going to the
corresponding first state 'New{Event,SubRun,Run,InputFile}'.

The creation of principals happens during the entry actions in the
'New*' states.

The writing of products is done during the exit actions of the
composite states ("processAndFinalizeEvent", "finalizeSubRun", and
"finalizeRun").

==================================
Switching output files and pausing
==================================

Switching output files is a non-trivial task, not easily handled by
the current implementation.  In order to avoid an excessive number of
states, the handling of output files is not encapsulated by any
explicit states like ("NewOutputFiles"), but rather is handled by
various transition actions.  This way, the states that do exist
correspond primarily to what 'nextItemType' returns.

In the future we may decide that it would be helpful to have two
concurrent state machines: one to handle the normal
Event/SubRun/Run/InputFile processing, and another to handle the
output file mechanics, with the two machines talking to each other
where necessary.  Boost statechart does support such a thing, but it
has not been pursued.

!!! N.B. The Pause and SwitchOutputFiles events are only posted
!!!      internally--i.e. no code outside of the state-machine should
!!!      ever explicitly process such events.

The 'Pause*' states exist so that output files can be switched without
prematurely writing the products of the current principal.

-------------
BEGIN EXAMPLE
-------------

Suppose the current state of the machine is 'NewEvent', and the
machine has received a SubRun event.  Furthermore, suppose a user has
requested that an output module switch files at a SubRun
boundary--internally, a Pause event and a SwitchOutputFiles event are
posted to the event queue.

The SubRun event will be acted upon by performing the following steps:

  [1] The machine exits from HandleEvents, calling
      processAndFinalizeEvent (thereby writing the event products).
  [2] The machine exits from HandleSubRuns, calling finalizeSubRun
      (thereby writing the subrun products).
  [3] The machine reenters the HandleSubRuns composite state,
      proceeding immediately to NewSubRun, where a principal for the
      new subrun is created.

This is now the point at which the output file can be closed.  Note
that the new subrun has already been started!  When closing an output
file, we must also write the Run products that have accumulated...but
note that we DO NOT want to write the subrun products from the new
subrun.

Since the SubRun event has already been processed (that's how we got
to NewSubRun), the Pause event is now acted upon, thereby
transitioning the machine to the PauseSubRun state, disabling the
finalizeSubRun as the transition action.  Disabling the finalizeSubRun
prevents the products of the new subrun from being written out to any
output files which were supposed to have the products of the PREVIOUS
subrun.

At this point, the SwitchOutputFiles event is processed, by being
forwarded all the way up to HandleFiles, calling finalizeRun when
leaving HandleRuns, thus writing the Run products of the current run.
Note that this IS correct since we have not started a new Run.

The transition action for SwitchOutputFiles is to close any output
files that have requested closing.  Once those outputs have been
closed, the history-pseudostate nature of HandleFiles is important.
Since the history for HandleFiles is remembered, the previous state of
the machine is restored--i.e. the state machine returns to
PauseSubRun, calling the HandleRuns and HandleSubRuns constructors en
route.  (This is the reason why the principals are created in the
entry actions of the 'New*' states and not the 'Handle*' states.  If
the principals were created during the entry actions of the 'Handle*'
states, ANOTHER principal would be created for the subrun which was
setup before the machine transitioned to PauseSubRun the first time.)
Calling the parent c'tors also implicitly re-enables the
finalizeSubRun, since the 'finalizeEnabled_' data member is
initialized to true.

From the PauseSubRun state, the machine awaits the next state-machine
event, and the state-machine transitions accordingly upon receipt of
it.

-----------
END EXAMPLE
-----------

There is an awkwardness in that whenever an output-file switch occurs,
the next event has already been started.  But there is no good way
around this since it is allowed for an output module to request file
closure DURING THE D'TOR of one of the composite states.  The d'tor is
called only upon having received a new event.  The new event is
already "in flight" and must be acted upon.

=====================================
Infelicities with closing input files
=====================================

Ideally, closing an input file could serve as an exit action from the
'HandleFiles' state.  However, since any output files must be closed
PRIOR to an input file being closed, there is not a straightforward
way to do this (that I can think of).  Sometimes an input-file closure
corresponds to just switching to a new input file (in which case
Machine::closeSomeOutputFiles is called).  Other times an input-file
closure happens at the end of the process (when
Machine::closeAllOutputFiles must be called).

In order to not make things more complicated, the input-file closures
were implemented as transition actions from the HandleFiles state.
Unless we can find a way to have 'closeSomeOutputFiles' mean
'closeAllOutputFiles' at the end of an art process, making input file
closures happen as a HandleFiles exit action is just likely to create
more complication than is desired.
