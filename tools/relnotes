#!/usr/bin/perl -w
########################################################################
# relnotes
#
# Produce skeleton Wiki release notes for a version.
#
# Requires MANAGER role on all packages to be interrogated (including ART).
#
# Takes at least one version argument,
########################################################################
use strict;

use Cwd qw(chdir :DEFAULT);
use File::Basename;
use FileHandle;
use Getopt::Long;
use Pod::Usage;

sub previous_version($\@);

my $options = {};

Getopt::Long::Configure(qw(no_ignore_case bundling require_order));

# Subsidiary packages to be recognized.
my @known_packages = qw(messagefacility fhicl-cpp cetlib cpp0x);
my %product_name = ( "fhicl-cpp" => "fhiclcpp" );

GetOptions($options,
           "help|h|?",
           "help-packages",
           "suite-version|s") or pod2usafe(-exitval => 2);

pod2usage(-exitval => 1, -verbose => 3) if $options->{help};

help_packages() if $options->{"help-packages"};

if ((scalar @ARGV) != 2) {
  print STDERR "ERROR: Expected exactly two non-option arguments.\n";
  pod2usage(-exitval => 2);
}

my ($package, $vnum) = @ARGV;

my @all_suite_versions = suite_versions(for_package("art", "cd /cvs/projects/art; git tag"));

if (lc $package eq "art") { # Want Art Suite release notes.
  my $suite_version = suite_version($vnum);
  my $dot_version = dot_version($vnum);
  my $prod_version = prod_version($vnum);
  my $version_date = tag_date("art", $suite_version);
  print "h1. Art Suite Release Notes $dot_version ($version_date).\n\n";
  print "* \"Download page\":https://scisoft.fnal.gov/scisoft/bundles/art/${prod_version}/art-${prod_version}.html.\n";
  my $prev = previous_version($dot_version, @all_suite_versions);
  if ($prev =~ /^\d/) {
    print "* Previous version's [[Release Notes $prev|release notes]].\n\n";
  }
  print "h2. External package changes.\n\n\n";
  print "h2. Art ",
    vpage($dot_version),
      ".\n\n";
  print <<EOF;
h3. New features:


h3. Bug fixes:


h3. Known issues:


EOF
  print map { my $package = $_;
              my $pv = pkg_version($package, $suite_version);
              sprintf("h2. \%s\%s.\n\n",
                      rpage($package, $pv), new_first($package, $pv, $dot_version)); } @known_packages;
} else {                        # Simpler: want package release notes.
  if ($options->{"suite-version"}) {
    $vnum = pkg_version($package, $vnum);
  }
  printf "h2. %%(#%s)$package%% %s, %s%s.\n",
    dot_version($vnum),
      vpage($vnum),
        tag_date($package, prod_version($vnum)),
          suite_reference_string(suite_references($package, $vnum));
}

1;

sub new_first {
  my ($package, $pv, $dot_version) = @_;
  my @versions = suite_references($package, $pv);
  my $first_version = dot_version($versions[0]);
  if ($first_version eq $dot_version) {
    return " (*%{color:green}new version%*)";
  } else {
    return sprintf(" (in since art %s)", vpage($first_version));
  }
}

sub help_packages {
  print STDERR "Known packages: art, ",
    join(", ", @{known_packages}),
      ".\n";
  exit(2);
}

sub for_package {
  my $package = shift;
  my $command = join(" ", @_);
  return "" unless $command =~ m&\S&;
  my $result = `ssh p-$package\@cdcvs.fnal.gov \"$command\" 2>/dev/null`;
  chomp $result;
  return $result;
}

sub ensure_gitconfig {
  my $package = shift;
  for_package($package,
              "git config --global user.name '$package admin'; git config --global user.email 'artists\@fnal.gov'");
}

sub vpage {
  my $version = dot_version(shift);
  return "version:\"$version\"";
}

sub dot_version {
  my $dot_version = shift;
  $dot_version =~ s&.*(?:ART_SUITE_)?v?([^_\.]+)[\._]([^_\.]+)[\._]([^_\.]+)(.*)$&$1.$2.$3$4&;
  return $dot_version;
}

sub prod_version {
  my $version = dot_version(shift);
  $version =~ s/\./_/g;
  return "v$version";
}

sub nosep_version {
  my $version = dot_version(shift);
  $version =~ s/\.//g;
  return $version;
}

sub suite_version {
  return sprintf("ART_SUITE_%s", prod_version(shift));
}

sub tag_date {
  my ($package, $tag) = @_;
  my $tag_date = for_package("$package", "cd /cvs/projects/$package; git log -1 --simplify-by-decoration --pretty=\"format:\%cd\" --date=short \"$tag\"");
  $tag_date =~ s&-&/&g;
  return $tag_date;
}

sub ncmp {
  my $s = ( (length($_[0]) <=> length($_[1])) > 0 ) ? length($_[0]) : length($_[1]);
  my ($l, $r) = map { if (m&^(\d+)(.*)$&) { sprintf("%0${s}d${2}",${1}) } else { $_; } } @_;
  return $l cmp $r;
}

sub by_version {
  my ($aM, $am, $au) = split /\./, dot_version($a);
  my ($bM, $bm, $bu) = split /\./, dot_version($b);
  return ncmp($aM, $bM) || ncmp($am, $bm) || ncmp($au, $bu);
}

sub previous_version($\@) {
  my $current = dot_version(shift);
  my $vref = shift;
  @$vref = map { dot_version($_); } @$vref;
  my $index = 0;
  foreach my $test_version (@$vref) {
    if ($test_version eq $current) {
      return $index ? $$vref[$index - 1] : 'none';
    }
    ++$index;
  }
  return "not found";
}

sub rpage {
  my ($package, $version) = @_;
  my $lpkg = lc $package;
  my $rversion = nosep_version(${version});
  my $dot_version = dot_version(${version});
  return ($lpkg eq "art"?
          "[[art:Release Notes ${dot_version}|Art Suite ${dot_version}]]":
          "[[$lpkg:Release Notes#${dot_version}|$package ${dot_version}]]");
}

sub product_name {
  my $package = shift;
  return $product_name{$package} || $package;
}

sub pkg_version {
  my $package = shift;
  my $suite_version = suite_version(shift);
  ensure_gitconfig($package);
  my $v_string =
    for_package($package,
                "cd /cvs/projects/$package; git log -1 --pretty=format:'\%d' $suite_version");
  if (!$v_string) {
    print STDERR "ERROR: Could not obtain log information for $package with suite tag $suite_version.\n";
    exit(1);
  }
  $v_string =~ s&^\s*\((.*)\)\s*$&${1}&g;
  my @pkg_versions = sort by_version (map { if (/tag:\s*(v\d+.*)$/) { ${1} } else { (); }; } (split /,\s*/, $v_string));

  if (scalar @pkg_versions == 1) {
    return dot_version($pkg_versions[0]);
  } elsif (not scalar @pkg_versions) {
    printf STDERR "ERROR: Could not find version for package $package tagged in art suite %s.\n", dot_version($suite_version);
    exit(1);
  } else {
    printf STDERR "ERROR: %d matching versions for package $package in art suite %s:\n",
      scalar @pkg_versions,
      dot_version($suite_version);
    printf STDERR "       %s\n", join(", ", @pkg_versions);
    exit(1);
  }
}

sub suite_versions {
  my @versions = grep /^ART_SUITE/, (split /[,\s]/, $_[0]);
  return sort by_version @versions;
}

sub suite_references {
  my $package = shift;
  my $dot_version = dot_version(shift);
  my $prod_version = prod_version($dot_version);
  ensure_gitconfig($package);
  my $v_string =
    for_package($package,
                "cd /cvs/projects/$package; git log -1 --pretty=format:'\%d' $prod_version");
  if (!$v_string) {
    print STDERR "ERROR: Could not obtain log information for $package version $dot_version: no tag $prod_version?\n";
    exit(1);
  }
  $v_string =~ s&tag: &&g;
  $v_string =~ s&^\s*\((.*)\)$&$1&;
  return suite_versions($v_string);
}

sub suite_reference_string {
  return (scalar @_) ?
    sprintf(' (%s)',
            join(", ", map { if (!$_) { (); } else { rpage("art", $_); } } sort by_version @_)) :
              '';
}

__END__

=pod

=head1 NAME

relnotes: Produce Wiki snippets for release notes for art or a subsidiary package.

=head1 SYNOPSIS

B<relnotes> B<-h> | B<--help> | B<-?>

B<relnotes> B<--help-packages>

B<relnotes> [I<options>] -- I<package> I<version>

I<Options>: B<--suite-version|-s>

=head1 DESCRIPTION

I<relnotes> is a tool to produce Wiki snippets for release notes for art packages: either art or a subsidiary package:

=over

=item B<Art>

Produce a skeleton Art Suite Release Notes page for pasting into a blank
page (which by convention should be named, "Release_Notes_MMmmuu" --
automatic if creating from a link "Release Notes MM.mm.uu"). This will
include links to the correct section of each subsidiary package's
Release Notes page (which by convention should be named,
"Release Notes").

=item B<Subsidiary packages>

Produce a skeleton h2 line for the specific version of said package
including links to all the Art Suite Release Notes pages of which this
package version is a part.

=back

=head2 ARGUMENTS

=over

=item I<package>

The package for which to produce the skeleton.

=item I<version>

The version of the package or (with I<-s>) a version of art whose suite
contains the desired version of I<package>.

=back

=head2 OPTIONS

=over

=item B<--suite-version>

=item B<-s>

Interpret I<version> as the version of art whose suite comprises the
desired version of I<package>.

=back

=head2 Redmine Version Pages

Distinct from yet related to release notes pages (which are entirely
normal Wiki pages created by the user), a Version page exists for every
version of a package as defined in the Settings/Versions section (or
created with the "+" button while updating the Target Version of an
issue). If the "Wiki" link is defined for that version then the content
of that page will be incorporated into the version page, below certain
specific information such as listing the issues listing this version as
their Target Version.

=head1 EXAMPLES

=over

=item relnotes art v0.7.13

h1. Art Suite Release Notes v0.07.13.

h2. Art version:"v0.07.13".

h2. [[cpp0x:Release_Notes#v1.01.14|cpp0x v1.01.14]].

h2. [[cetlib:Release_Notes#v1.01.00|cetlib v1.01.00]].

h2. [[fhicl-cpp:Release_Notes#v2.12.10|fhicl-cpp v2.12.10]].

h2. [[messagefacility:Release_Notes#v1.08.24|messagefacility v1.08.24]].

=item relnotes -s cetlib v0.7.13

h2. %(#v1.01.00)cetlib% version:"v1.01.00" ([[art:Release_Notes_v00712|art v0_07_12]], [[art:Release_Notes_v00713|art v0_07_13]]).

=item relnotes cetlib v1.01.00

h2. %(#v1.01.00)cetlib% version:"v1.01.00" ([[art:Release_Notes_v00712|art v0_07_12]], [[art:Release_Notes_v00713|art v0_07_13]]).

=back

=cut
