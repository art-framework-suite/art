# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

sys.path.insert(0, os.path.abspath('_extensions'))


# -- Project information -----------------------------------------------------

project = 'art'
copyright = '2018'
author = 'artists'

# more general stuff
src=os.environ['MRB_SOURCE']
top=os.environ['MRB_TOP']
html = os.environ['HTML_DIR']#+'/'project

def dotted_version(normal_version):
    return normal_version.lstrip('v').replace('_', '.')

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = dotted_version('@version@')

# Assemble list of already-built documentation that will appear in the
# versions drop-down menu.
#built_docs_path = '/Users/kyleknoepfel/work/art_suite_docs/' + project
#built_docs_path = '/home/ryan/Documents/fermilab/work/doc_devel/srcs/' + project
#built_docs_path = src+'/'+project
built_docs_path = top+'/all_docs/'+project

print("\n\n\ninvestigating the version tab stuff..")
files = os.listdir(built_docs_path)
print(files)
subdirs = [subdir for subdir in files
           if os.path.isdir(os.path.join(built_docs_path, subdir))]
versions = { subdir: dotted_version(subdir) for subdir in subdirs }
print(built_docs_path+subdirs[0])

versions['@version@'] = release

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.intersphinx',
    'redmineRoles',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinxdoc'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}
#html_sidebars = {'**': ['localtoc.html', 'searchbox.html', 'dependencies.hmtl']}

html_context = {'project': project, 'release': release, 'versions': versions}

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = project + 'doc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, project + '.tex', project + ' Documentation',
     'Kyle Knoepfel', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, project, project + ' Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, project, project + ' Documentation',
     author, project, 'One line description of project.',
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------
fnal_redmine_url = 'https://cdcvs.fnal.gov/redmine/'
def setup(app):
    app.add_stylesheet('artdoc.css')

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}

rst_epilog = """
.. |release| replace:: *{projname}* {versionnum}
""".format(projname = project, versionnum = release)


# Maybe more intersphinx stuff: but also just messing around w/ executable stuff
print("+++++++++++++++++++++++\n\n\n\n\n")


products = 0 
depends_on = []

with open(src+'/'+project+'/ups/product_deps') as deps_file:
  for line in deps_file:
    val = line.split()
    if(not val): continue
    if(val[0] == 'end_product_list'): products = 0 
    # product list
    if(products):
      item = [val[0], val[1]]
      depends_on.append(item)
    if(val[0] == 'product'): products = 1


with open(src+'/'+project+'/docs/depends.rst', 'w+') as deps_page:
  deps_page.write('|release| depends on')
  deps_page.write('\n====================\n')
  for pkg in depends_on:
    #deps_page.write(pkg[0]+pkg[1]+'\n')
    pkg_path = html+'/'+pkg[0]
    #if(os.path.isdir(html+'/'+pkg[0])):
    if(os.path.isdir(pkg_path)):
      print("this is a directory: ", html+'/'+pkg[0])
      print("\tthe version is: ", pkg[1])
      #deps_page.write('\n| `(internal link): '+pkg[0]+' <'+pkg_path+'/index.html>`_')
      deps_page.write('\n| `(internal link): '+pkg[0]+' '+pkg[1]+' <../../'+pkg[0]+'/index.html>`_')
    else:
      print("this is not a directory: ", html+'/'+pkg[0])
      deps_page.write('\n| (external link): '+pkg[0]+' '+pkg[1])

print("+++++++++++++++++++++++\n\n\n\n\n")
